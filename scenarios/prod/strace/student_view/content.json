{
    "ScenarioTitle": "Description",
    "StudentGuide": {
        "TotalQuestions": 10,
        "TotalPoints": 50,
        "SectionOrder": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8
        ],
        "Sections": [
            {
                "Count": 1,
                "Title": "Background",
                "Order": [
                    [
                        "r",
                        "1"
                    ]
                ]
            },
            {
                "Count": 2,
                "Title": "Learning Objectives",
                "Order": [
                    [
                        "r",
                        "2"
                    ]
                ]
            },
            {
                "Count": 3,
                "Title": "First Traces",
                "Order": [
                    [
                        "r",
                        "3"
                    ],
                    [
                        "q",
                        "1"
                    ],
                    [
                        "r",
                        "4"
                    ],
                    [
                        "q",
                        "2"
                    ],
                    [
                        "r",
                        "5"
                    ]
                ]
            },
            {
                "Count": 4,
                "Title": "Second Traces",
                "Order": [
                    [
                        "r",
                        "6"
                    ],
                    [
                        "q",
                        "3"
                    ]
                ]
            },
            {
                "Count": 5,
                "Title": "Reverse Engineering a Trace",
                "Order": [
                    [
                        "r",
                        "7"
                    ],
                    [
                        "q",
                        "4"
                    ]
                ]
            },
            {
                "Count": 6,
                "Title": "Trace Filtering",
                "Order": [
                    [
                        "r",
                        "8"
                    ],
                    [
                        "q",
                        "5"
                    ]
                ]
            },
            {
                "Count": 7,
                "Title": "Mystery Files",
                "Order": [
                    [
                        "r",
                        "9"
                    ],
                    [
                        "q",
                        "6"
                    ],
                    [
                        "r",
                        "10"
                    ],
                    [
                        "q",
                        "7"
                    ]
                ]
            },
            {
                "Count": 8,
                "Title": "What's wrong with that cat?",
                "Order": [
                    [
                        "r",
                        "11"
                    ],
                    [
                        "q",
                        "8"
                    ],
                    [
                        "q",
                        "9"
                    ],
                    [
                        "q",
                        "10"
                    ],
                    [
                        "r",
                        "12"
                    ]
                ]
            }
        ],
        "Readings": {
            "1": "<p>Strace (dynamic analysis of binaries) poses the challenge of understanding what a process is\ndoing based on its system calls. You will learn to filter large amounts of data to distinguish\nbetween normal and anomalous behavior.</p>\n<h2>Background</h2>\n<p>One of the important skills of cyber security is being able to analyze malware. These skills\noverlap with debugging, except that the problems can be more subtle. This exercise focuses on\ndynamic analysis of programs, i.e. analyzing what a program does while it is running. It turns out\nthat in order to do anything, a program or process relies heavily on the operating system. The\nsystem call (syscalls) can reveal a lot about what the program is doing. One of the tools for\nexamining the syscalls is strace. You should first figure out where the strace binary is located\nand what some of the options are (look at the man pages)</p>\n<p>You will start with whitebox testing of some programs for which you have the source code. Then,\nyou can move to blackbox testing using trace files. When reading through the traces, you will\nfirst need to figure out what the system calls are doing. The system calls also have man pages.\nThe last strace in this example has two executables running. If you are working in a group, think\nabout how you can divide up the work in an efficient way.</p>",
            "2": "<h2>Learning Objectives</h2>\n<ul>\n<li>Know how to analyze the sequence of sys calls and recognize patterns</li>\n<li>Be able to determine if a program is behaving as expected</li>\n<li>Recognize when a process forks another process</li>\n<li>Recognize when a process opens a file or socket</li>\n<li>Recognize when a process deletes a file</li>\n<li>Recognize which system calls introduce threats and how that happens</li>\n</ul>",
            "3": "<h2>First Traces</h2>\n<p>Your home directory contains various files that will be used in this scenario. One is the file\nempty.c, whose contents are:\n<code>int main () {}</code></p>\n<p>Compile this program as follows\n<code>gcc -o empty empty.c</code></p>\n<p>Now run strace to execute the empty program:\n<code>strace ./empty</code></p>\n<p>To see a summary and count of all the syscalls used, you can add the -c flag such as:\n<code>strace -c ./empty</code></p>\n<p>There are additional arguments to provide summary statistics or filter your output, check\n<code>man strace</code> for more information.</p>",
            "4": "<p>The file hello.c contains this simple program:</p>\n<pre><code>#include &lt;stdio.h&gt;\nint main () {\nprintf(&quot;hello\\n&quot;);\n}\n</code></pre>\n<p>Compile hello.c to hello and execute it with strace:</p>\n<pre><code>gcc \u2013o hello hello.c\nstrace ./hello\n</code></pre>",
            "5": "<p>The -o option of strace writes its output to a file. Do the following:</p>\n<pre><code>strace -o empty-trace ./empty\nstrace -o hello-trace ./hello\ndiff empty-trace hello-trace\n</code></pre>\n<p>Discussion Question: Is this an effective way to determine the differences between these traces?\nWhy or why not?</p>",
            "6": "<h2>Second Traces</h2>\n<p>Use a text editor to read the source code contents of copy.c</p>\n<p>Notice the new functions we're using, such as:</p>\n<pre><code>fopen()\nsnprintf()\nfprintf()\n</code></pre>\n<p>How might these C functions be invoked in syscall form?</p>",
            "7": "<h2>Reverse Engineering a Trace</h2>\n<p>The file strace-identify was created by calling strace on a command. The first line of the trace\nhas been deleted to make it harder to identify. Determine the command on which strace was\ncalled to produce this trace. Do not include \"strace\" in your answer.</p>",
            "8": "<h2>Trace Filtering</h2>\n<p>Sometimes strace prints out an overwhelming amount of output. One way to filter through the\noutput is to save the trace to a file and search through the file with grep. But strace is equipped\nwith some options that can do some summarization and filtering. To see some of these, try the\nfollowing, and explain the results:</p>\n<pre><code>find /etc/dhcp\nstrace find /etc/dhcp\nstrace -c find /etc/dhcp\nstrace -e trace=file find /etc/dhcp\nstrace -e trace=open,close,read,write find /etc/dhcp\n</code></pre>",
            "9": "<h2>Mystery Files</h2>\n<p>The file mystery is an executable whose source code is not available. Use strace to explain\nwhat the program does in the context of the following examples:</p>\n<pre><code>./mystery foo abc\n./mystery foo def\n./mystery baz gh\n</code></pre>",
            "10": "<p>Processes will often spawn child tasks, or \"forks\", which may not be as easy to trace.</p>\n<p>Here is a simple shell script in script.sh:</p>\n<pre><code>#!/bin/bash\necho &quot;a&quot; &gt; foo.txt\necho &quot;bc&quot; &gt;&gt; foo.txt\necho \u2018id -urn\u2018 &gt;&gt; foo.txt\nchmod 750 foo.txt\ncat foo.txt | wc\nchmod 644 foo.txt\n``\n\nCompare the outputs of the following calls to strace involving this script. Explain what you see in\nthe traces in terms of the commands in the script.\n\n</code></pre>\n<p>strace ./script.sh\nstrace -f ./script.sh\n```</p>\n<p>Discussion: What didn't you see it doing without the -f flag?</p>",
            "11": "<h2>What's wrong with that cat?</h2>\n<p>Create a one-line \u201csecret.txt\u201d file. Here\u2019s an example, though of course you should choose\nsomething different as your secret:</p>\n<pre><code>echo &quot;My phone number is 123-456-7890&quot; &gt; secret.txt\n</code></pre>\n<p>Now display the secret to yourself using cat:</p>\n<pre><code>cat secret.txt\nMy phone number is 123-456-7890\n</code></pre>\n<p>Is your secret really secret? How much do you trust the cat program? Start by running strace on\ncat secret.txt to determine what it's actually doing. Based on this and subsequent experiments,\ndetermine answers to the following questions:</p>\n<p>Discussion question: What is this cat doing that you wouldn't expect? What is the end result of this cat?</p>",
            "12": "<p>Discussion questions: \nHow do you think the trojaned cat program was implemented?</p>\n<p>```</p>"
        },
        "Questions": {
            "1": {
                "Text": "How many total syscalls are executed when running ./empty ?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": 29,
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "2": {
                "Text": "What syscall is invoked when running ./hello that wasnt present when running ./empty ?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "write",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "3": {
                "Text": "What syscall is associated with the printf() function in the C source code?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "write",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "4": {
                "Text": "What command was run by strace to produce the tracefile \"strace-identify\"?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "which start",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "5": {
                "Text": "What argument would you add after the -e flag to look for file reads?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "read",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "6": {
                "Text": "What directory does the mystery executable interact with?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "/tmp/",
                        "Points": 5
                    },
                    {
                        "Value": "/tmp",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "7": {
                "Text": "What is the secret Flag obtained by tracing script.sh? (The inner contents of FLAG{...})",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "$RANDOM_ONE",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "8": {
                "Text": "Where is the cat you are using being executed from?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": "/usr/bin/cat",
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "9": {
                "Text": "True or False, can anyone else read your secrets?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": true,
                        "Points": 5
                    }
                ],
                "Points": 5
            },
            "10": {
                "Text": "True or False, can you read the secrets of others?",
                "Type": "String",
                "Answers": [
                    {
                        "Value": true,
                        "Points": 5
                    }
                ],
                "Points": 5
            }
        }
    },
    "InstructorGuide": {}
}